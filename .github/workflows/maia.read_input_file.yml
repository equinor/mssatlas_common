name: Callable - Read JSON input parameters

on:
  workflow_call:
    inputs:
      filename:
        description: 'JSON file with input parameters.'
        type: string
        required: true

    outputs:
      squad_name: 
        value: ${{ jobs.read_json.outputs.squad_name }}
      
      dev_subscriptionid:
        value: ${{ jobs.read_json.outputs.dev_subscriptionid }}
      dev_resourcegroup: 
        value: ${{ jobs.read_json.outputs.dev_resourcegroup }}
      dev_datafactory_name: 
        value: ${{ jobs.read_json.outputs.dev_datafactory_name }}
      dev_databricks_kv: 
        value: ${{ jobs.read_json.outputs.dev_databricks_kv }}
      dev_squad_name: 
        value: ${{ jobs.read_json.outputs.dev_squad_name }}

      test_subscriptionid:
        value: ${{ jobs.read_json.outputs.test_subscriptionid }}
      test_resourcegroup: 
        value: ${{ jobs.read_json.outputs.test_resourcegroup }}
      test_datafactory_name: 
        value: ${{ jobs.read_json.outputs.test_datafactory_name }}
      test_databricks_kv: 
        value: ${{ jobs.read_json.outputs.test_databricks_kv }}

      qa_subscriptionid:
        value: ${{ jobs.read_json.outputs.qa_subscriptionid }}
      qa_resourcegroup: 
        value: ${{ jobs.read_json.outputs.qa_resourcegroup }}
      qa_datafactory_name: 
        value: ${{ jobs.read_json.outputs.qa_datafactory_name }}
      qa_databricks_kv: 
        value: ${{ jobs.read_json.outputs.qa_databricks_kv }}

      prod_subscriptionid:
        value: ${{ jobs.read_json.outputs.prod_subscriptionid }}
      prod_resourcegroup: 
        value: ${{ jobs.read_json.outputs.prod_resourcegroup }}
      prod_datafactory_name: 
        value: ${{ jobs.read_json.outputs.prod_datafactory_name }}
      prod_databricks_kv: 
        value: ${{ jobs.read_json.outputs.prod_databricks_kv }}

jobs:
  read_json:
    runs-on: ubuntu-latest
    outputs:
      squad_name: ${{ steps.read_file.outputs.squad_name }}

      dev_subscriptionid: ${{ steps.read_file.outputs.dev_subscriptionid }}
      dev_resourcegroup: ${{ steps.read_file.outputs.dev_resourcegroup }}
      dev_datafactory_name: ${{ steps.read_file.outputs.dev_datafactory_name }}
      dev_databricks_kv: ${{ steps.read_file.outputs.dev_databricks_kv }}
      dev_squad_name: ${{ steps.read_file.outputs.dev_squad_name }}

      test_subscriptionid: ${{ steps.read_file.outputs.test_subscriptionid }}
      test_resourcegroup: ${{ steps.read_file.outputs.test_resourcegroup }}
      test_datafactory_name: ${{ steps.read_file.outputs.test_datafactory_name }}
      test_databricks_kv: ${{ steps.read_file.outputs.test_databricks_kv }}

      qa_subscriptionid: ${{ steps.read_file.outputs.qa_subscriptionid }}
      qa_resourcegroup: ${{ steps.read_file.outputs.qa_resourcegroup }}
      qa_datafactory_name: ${{ steps.read_file.outputs.qa_datafactory_name }}
      qa_databricks_kv: ${{ steps.read_file.outputs.qa_databricks_kv }}

      prod_subscriptionid: ${{ steps.read_file.outputs.prod_subscriptionid }}
      prod_resourcegroup: ${{ steps.read_file.outputs.prod_resourcegroup }}
      prod_datafactory_name: ${{ steps.read_file.outputs.prod_datafactory_name }}
      prod_databricks_kv: ${{ steps.read_file.outputs.prod_databricks_kv }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: feature/test-input-exceptions

      - name: Read JSON
        id: read_file
        run: |
          FILE_PATH=${{inputs.filename}}

          echo ::set-output name=squad_name::$(jq -r '.squad_name' $FILE_PATH)

          echo ::set-output name=dev_subscriptionid::$(jq -r '.environments.dev.subscriptionid' $FILE_PATH)
          echo ::set-output name=dev_resourcegroup::$(jq -r '.environments.dev.resourcegroup' $FILE_PATH)
          echo ::set-output name=dev_datafactory_name::$(jq -r '.environments.dev.datafactory_name' $FILE_PATH)
          echo ::set-output name=dev_databricks_kv::$(jq -r '.environments.dev.databricks_kv' $FILE_PATH)
          echo ::set-output name=dev_squad_name::$(jq -r '.environments.dev.squad_name' $FILE_PATH)

          echo ::set-output name=test_subscriptionid::$(jq -r '.environments.test.subscriptionid' $FILE_PATH)
          echo ::set-output name=test_resourcegroup::$(jq -r '.environments.test.resourcegroup' $FILE_PATH)
          echo ::set-output name=test_datafactory_name::$(jq -r '.environments.test.datafactory_name' $FILE_PATH)
          echo ::set-output name=test_databricks_kv::$(jq -r '.environments.test.databricks_kv' $FILE_PATH)

          echo ::set-output name=qa_subscriptionid::$(jq -r '.environments.qa.subscriptionid' $FILE_PATH)
          echo ::set-output name=qa_resourcegroup::$(jq -r '.environments.qa.resourcegroup' $FILE_PATH)
          echo ::set-output name=qa_datafactory_name::$(jq -r '.environments.qa.datafactory_name' $FILE_PATH)
          echo ::set-output name=qa_databricks_kv::$(jq -r '.environments.qa.databricks_kv' $FILE_PATH)

          echo ::set-output name=prod_subscriptionid::$(jq -r '.environments.prod.subscriptionid' $FILE_PATH)
          echo ::set-output name=prod_resourcegroup::$(jq -r '.environments.prod.resourcegroup' $FILE_PATH)
          echo ::set-output name=prod_datafactory_name::$(jq -r '.environments.prod.datafactory_name' $FILE_PATH)
          echo ::set-output name=prod_databricks_kv::$(jq -r '.environments.prod.databricks_kv' $FILE_PATH)

      # - name: Verify valid input parameters
      #   run: |
      #     SQUADNAME=${{ steps.read_file.outputs.squad_name }}

      #     if [[ -z "${SQUADNAME// }" ]]; then
      #       echo "Invalid squad name inputted: ${SQUADNAME}. Check file ${{inputs.filename}}."
      #       exit 1
      #     fi
